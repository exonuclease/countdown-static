{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["TextArea","Input","Item","List","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSave","flag","clearInterval","setState","data","JSON","parse","state","text","map","item","objectSpread","current","onChange","e","target","value","onCheckChange","sortByTime","checked","updateTime","newData","nextSec","interval","sort","a","b","onStart","setInterval","react_default","createElement","className","list","bordered","dataSource","renderItem","style","marginRight","name","progress","percent","format","concat","es_button","onClick","es_checkbox","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TAIQA,UAAaC,IAAbD,UACAE,EAASC,IAATD,KAkFOE,cA/Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAKRQ,OAAS,WACHP,EAAKQ,MAAMC,cAAcT,EAAKQ,MAClCR,EAAKQ,KAAO,KACZR,EAAKU,SAAS,CACZC,KAAMC,KAAKC,MAAMb,EAAKc,MAAMC,MAAMC,IAAI,SAAAC,GAAI,OAAAhB,OAAAiB,EAAA,EAAAjB,CAAA,GAAUgB,EAAV,CAAgBE,QAAS,SAVpDnB,EAcnBoB,SAAW,SAAAC,GACTrB,EAAKU,SAAS,CAAEK,KAAMM,EAAEC,OAAOC,SAfdvB,EAkBnBwB,cAAgB,SAAAH,GACdrB,EAAKU,SAAS,CAAEe,WAAYJ,EAAEC,OAAOI,WAnBpB1B,EAsBnB2B,WAAa,WACX,IAAIC,EAAU5B,EAAKc,MAAMH,KAAKK,IAAI,SAAAC,GAChC,IAAIY,EAMJ,OALIZ,EAAKE,QAAUF,EAAKa,SACtBD,EAAUZ,EAAKE,QAAU,EAChBF,EAAKE,UACdU,EAAU,GAEL5B,OAAAiB,EAAA,EAAAjB,CAAA,GAAKgB,EAAZ,CAAkBE,QAASU,MAEzB7B,EAAKc,MAAMW,aACbG,EAAUA,EAAQG,KAChB,SAACC,EAAGC,GAAJ,OAAUD,EAAEF,SAAWE,EAAEb,SAAWc,EAAEH,SAAWG,EAAEd,YAGvDnB,EAAKU,SAAS,CACZC,KAAMiB,KAtCS5B,EA0CnBkC,QAAU,WACJlC,EAAKQ,MAAMC,cAAcT,EAAKQ,MAClCR,EAAKQ,KAAO2B,YAAYnC,EAAK2B,WAAY,MA1CzC3B,EAAKc,MAAQ,CAAEH,KAAM,GAAII,KAAM,GAAIU,YAAY,GAC/CzB,EAAKQ,KAAO,KAHKR,wEAgDjB,OACEoC,EAAAJ,EAAAK,cAAA,OAAKC,UAAU,OACbF,EAAAJ,EAAAK,cAAA,OAAKC,UAAU,WACbF,EAAAJ,EAAAK,cAACE,EAAA,EAAD,CACED,UAAU,OACVE,UAAQ,EACRC,WAAYtC,KAAKW,MAAMH,KACvB+B,WAAY,SAAAzB,GAAI,OACdmB,EAAAJ,EAAAK,cAACzC,EAAD,KAEIwC,EAAAJ,EAAAK,cAAA,OAAKC,UAAU,aACbF,EAAAJ,EAAAK,cAAA,KAAGM,MAAO,CAAEC,YAAa,SAAW3B,EAAK4B,MACzCT,EAAAJ,EAAAK,cAACS,EAAA,EAAD,CACEC,QAAU9B,EAAKE,QAAUF,EAAKa,SAAY,IAC1CkB,OAAQ,oBAAAC,OAAShC,EAAKE,QAAd,KAAA8B,OAAyBhC,EAAKa,kBAOlDM,EAAAJ,EAAAK,cAACa,EAAA,EAAD,CAAQC,QAAShD,KAAK+B,SAAtB,gBACAE,EAAAJ,EAAAK,cAAC3C,EAAD,CAAU6B,MAAOpB,KAAKW,MAAMC,KAAMK,SAAUjB,KAAKiB,WACjDgB,EAAAJ,EAAAK,cAACa,EAAA,EAAD,CAAQC,QAAShD,KAAKI,QAAtB,6BACA6B,EAAAJ,EAAAK,cAACe,EAAA,EAAD,CAAUhC,SAAUjB,KAAKqB,eAAzB,6DAzEQ6B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAJ,EAAAK,cAACwB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.02fe610e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Progress, Button, Input, List, Checkbox } from 'antd';\nimport './App.css';\n\nconst { TextArea } = Input;\nconst { Item } = List;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { data: [], text: '', sortByTime: false };\n    this.flag = null;\n  }\n\n  onSave = () => {\n    if (this.flag) clearInterval(this.flag);\n    this.flag = null;\n    this.setState({\n      data: JSON.parse(this.state.text).map(item => ({ ...item, current: 0 }))\n    });\n  };\n\n  onChange = e => {\n    this.setState({ text: e.target.value });\n  };\n\n  onCheckChange = e => {\n    this.setState({ sortByTime: e.target.checked });\n  };\n\n  updateTime = () => {\n    let newData = this.state.data.map(item => {\n      let nextSec;\n      if (item.current < item.interval) {\n        nextSec = item.current + 1;\n      } else if (item.current) {\n        nextSec = 1;\n      }\n      return { ...item, current: nextSec };\n    });\n    if (this.state.sortByTime) {\n      newData = newData.sort(\n        (a, b) => a.interval - a.current - (b.interval - b.current)\n      );\n    }\n    this.setState({\n      data: newData\n    });\n  };\n\n  onStart = () => {\n    if (this.flag) clearInterval(this.flag);\n    this.flag = setInterval(this.updateTime, 1000);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"content\">\n          <List\n            className=\"list\"\n            bordered\n            dataSource={this.state.data}\n            renderItem={item => (\n              <Item>\n                {\n                  <div className=\"list-item\">\n                    <p style={{ marginRight: '10px' }}>{item.name}</p>\n                    <Progress\n                      percent={(item.current / item.interval) * 100}\n                      format={() => `${item.current}/${item.interval}`}\n                    />\n                  </div>\n                }\n              </Item>\n            )}\n          />\n          <Button onClick={this.onStart}>开始</Button>\n          <TextArea value={this.state.text} onChange={this.onChange} />\n          <Button onClick={this.onSave}>保存/清零</Button>\n          <Checkbox onChange={this.onCheckChange}>根据剩余时间排序</Checkbox>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}